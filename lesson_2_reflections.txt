What happens when you initialize a repository? Why do you need to do it?

    When you initialize a repository, a git file is created for the process of sending commits up to git hub.
    This needs to be done in order to keep create the foundations for commits, keep track of changes to and the creation
    of files related to the repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?

    The staging area acts as a hub for changes to repository files that have yet to be committed.  This allows for the
    user to pick which changes they would like to commit at any time of their choosing.


How can you use the staging area to make sure you have one commit per logical change?
    You can do this by sending a file(s) to the staging area that are only related to the logical change.
    You can also check to make sure they are the correct files by using the git status command.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
    Branches help be allowing the user to test features and ideas separate from the master. It can also help the user
    when they find an issue with the original master branch which would help them with making the proper adjustments
    to all the other branches created from the master.

How do the diagrams help you visualize the branch structure?
    They help visualize the branch structure by allowing me to see the history of commits and branches.  And helps me
    to understand where I may need to create new branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
    The result is a combination of all the commits associated with the 2 branches organized by timestamp.
    It is represented in the diagram as such to visualize the commit history and gain an understanding of what parts
    will actually be merged together.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
    With automatic merging you ensure that the merge does occur but you have no control over conflicts and
    what should happens when those conflicts occur. When you do merges manually you have full control over what
    happens when a conflict occurs but sometimes conflict resolution may be tedious when you know what should have
    been changed anyway.